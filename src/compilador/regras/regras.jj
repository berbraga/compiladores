options {
    STATIC = false;
}
PARSER_BEGIN(prataLang)
package compilador.regras;
import java.io.*;
import compilador.telas.CompiladorGui;
public class prataLang {

  final static String Version = "PrataLang Compiler - Version 1.0 - 2024";
  boolean Menosshort = false;

  public static void main(String[] args) throws ParseException {
    String filename = ""; // nome do arquivo a ser analizado
    prataLang parser;
    int i;
    boolean ms = false;

    System.out.println(Version);

    // le os parametros passados para o compilador
    for(i = 0; i < args.length - 1; i++) {
      if ( args[i].equalsIgnoreCase("-short") ) ms = true;
      else{
        System.out.println("Usage is: java PrataLang [-short] inputfile");
        System.exit(0);
      }
    }

    if (args[i].equals("-")){
      // le entrada padrão
       System.out.println(" Reading from standard input . . . ");
       parser = new prataLang(System.in);
    } else {
      // le do arquivo
      filename = args[args.length-1];
      System.out.println("Readig from file " + filename + " . . . ");
      try{
        parser = new prataLang(new java.io.FileInputStream(filename));
      } catch (java.io.FileNotFoundException e ) {
        System.out.println("File "+filename+ " NOT FOUND");
        return;
      }
    }
    parser.Menosshort = ms;
    //parser.program(); //chama o metodo que faz a analise

    // verifica se houver erro lexico
    if (parser.token_source.foundLexError() != 0)
      System.out.println(
        parser.token_source.foundLexError() + " Erro Lexico encontrado!! "
      );
    else System.out.println(" Program successfully analized ");



  } //main

    // Metodo que é chamado no CompiladorGui para compilar pelo botão e pelo menu
  public static void Compile(String file, prataLang parser, CompiladorGui gui) throws ParseException {
      String filename = file; // nome do arquivo a ser analizado
      boolean ms = false;

      gui.jTextArea1.append(Version + "\n");

      gui.jTextArea1.append("Readig from file " + filename + " . . .  \n");

      try{
            parser = new prataLang(new java.io.FileInputStream(filename));
      } catch (java.io.FileNotFoundException e ) {
            gui.jTextArea1.append("File "+filename+ " NOT FOUND \n");
            return;
      }

      parser.Menosshort = ms;
      parser.program(gui); //chama o metodo que faz a analise

      if (parser.token_source.foundLexError() != 0)
            gui.jTextArea1.append(
              parser.token_source.foundLexError() + " Lexic Error Found \n"
            );
      else gui.jTextArea1.append(" Successfully Analized Program \n");
  }

  //metodo auxiliar
  static public String im(int x) {
    int  k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try{
      s=s.substring(1,k);
    }
    catch (StringIndexOutOfBoundsException e ){ }
    return s;
  }
}

PARSER_END(prataLang)

TOKEN_MGR_DECLS : {
    int countLexError = 0;

    public int foundLexError(){
        return countLexError;
    }
}

SKIP : {
    " " | "\t" | "\n" | "\r"| "\f"  // Ignora espaços em branco e quebras de linha
}

// Multiline comment
SKIP : {
    "/*" : multilinecomment
}

<multilinecomment> SKIP : {
    "*/" : DEFAULT   // Sai do modo de comentário ao encontrar */
    | <~[]>
}

// sigle line comment
SKIP : {
    "//" : singlelinecomment
}
<singlelinecomment> SKIP: {
    <["\n","\r"]>:DEFAULT
    | <~[]>
}

// PALAVRAS RESERVADAS
TOKEN : {
      < MAKE : "make" >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");;
    }
    | < END  : "end"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    | < CONST  : "const"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    | < INT  : "int"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    | < REAL  : "real"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    | < CHAR  : "char"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    | < BOOL  : "bool"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    | < VAR  : "var"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    | < GET  : "get"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    | < PUT  : "put"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    | < IF  : "if"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    | < THEN  : "then"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    | < ELSE  : "else"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    | < WHILE  : "while"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    | < DO  : "do"  >
    {
                     error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
}

// OPERADORES LOGICOS
TOKEN :
{
       < NOT : "!" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < OR : "|" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < END_LOGIC : "&" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
}

// OPERADORES RELACIONAIS
TOKEN :
{
       < ASSIGN : "->" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < EQUAL : "=" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < DIFFERENT : "<>" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < MINOR : "<" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < MINOR_EQUAL : "<=" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < BIGGER : ">" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < BIGGER_EQUAL : ">=" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
}
// OPERADORES ARITMETRIC
TOKEN :
{
       < PLUS : "+" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < MINUS : "-" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < MULTIPLICATION : "*" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < DIVISION : "/" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < POTENCY : "**" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < ENTIRE_DIVISION : "%" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < DIVISION_REST : "%%" >
     {
                      error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
}
// CONSTANTES
TOKEN :
{
       < TRUE : "true" >
     {
                 error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < FALSE   : "false" >
     {
                 error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < int_constant  : (["0"-"9"]) (["0"-"9"])? (["0"-"9"])? >
     {
                 error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < char_constant : ("\"" ~["\"", "\n", "\r", "\f"] "\"" | "'" ~["'", "\n", "\r", "\f"] "'") >
     {
                 error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < float_constant : (["0"-"9"]) (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? "." (["0"-"9"]) (["0"-"9"])? >
     {
                 error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < string_constant : // constante string como "abcd bcda" ou 'abcd bcda'
           ("\"" (~["\"", "\n", "\r"])* "\"" | "'" (~["'", "\n", "\r"])* "'")
       >
     {
                 error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }
     | < null_constant   : "null" >
     {
                 error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
     }

}

// IDENTIFICADORES
TOKEN :
{
    < IDENT  : ( ["a"-"z", "A"-"Z"]  | "_" ) ( ["a"-"z", "A"-"Z"]  |"_"| ["0" - "9"] ( ["a"-"z", "A"-"Z"] | "_" ) )* (["a"-"z", "A"-"Z"] | "_") >
    {
                error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
}

// SIMBULOS ESPECIAIS
TOKEN :
{
    < DOT : "." >
    {
        error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    |
    < COMMA : "," >
    {
            error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    |
    < SEMICOLON : ";" >
    {
            error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    |
    < LPAREN : "(" >
    {
            error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
    |
    < RPAREN : ")" >
    {
            error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " Token: " + image + " Code: ");
    }
}

// Token para erros léxicos
TOKEN : {

    < INVALID_LEXICAL : (~["a"-"z",
        "A"-"Z",
        "0"-"9",
        "\n", "\r",
        "\t", "\f",
        "\"",
        "'",
        " ",
        "(", ")",
        "[", "]",
        "{", "}",
        ",",
        ".",
        ";",
        "=",
        "<",
        ">",
        "+",
        "-",
        "*",
        "/",
        "&",
        "|",
        "!",
        "%",
        "^",
        "_"]) + >
            {
                error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " - Invalid Character Found: " + image + " Code: ");;
                countLexError++;
            }
   |
        <INVALID_CONST_STRING_END:
        "\"" (~ ["\n", "\r", "\"", "\f"])* ["\n", "\r", "\f", "'"] | "'" (~ ["\n", "\r", "\"", "\f"])* ["\n", "\r", "\f", "\""] >
        {
            error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " - Invalid String/Character Ending: " + image + " Code: ");;
            countLexError++;
        }
  |
        <INVALID_CONST_INT_SIZE:
        (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"])+>
        {
            error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " - Invalid Int Size: " + image + " Code: ");;
            countLexError++;
        }
 |
       <INVALID_CONST_FLOAT_SIZE:
      ((["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"])+ "." (["0"-"9"]) (["0"-"9"]) | (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"])+ "." (["0"-"9"]) (["0"-"9"]) (["0"-"9"])+ | (["0"-"9"]) (["0"-"9"]) (["0"-"9"]) (["0"-"9"])  "." (["0"-"9"]) (["0"-"9"]) (["0"-"9"])+)>
       {
               error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " - Invalid Float Size: " + image + " Code: ");;
               countLexError++;
       }
|
       <INVALID_COMMENT_CLOSE:
       "*/" >
       {
            error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " - Invalid Closing of a Comment: " + image + " Code: ");;
            countLexError++;
       }
|
       <INVALID_IDENTIFIER:
       (((["A"-"Z", "a"-"z"] | "_") (["A"-"Z", "a"-"z"] | "_" | ["0" - "9"] (["A"-"Z", "a"-"z"] | "_"))* ["0" - "9"]) | ((["A"-"Z", "a"-"z"] | "_") (["A"-"Z", "a"-"z"] | "_" | ["0" - "9"] ["0" - "9"] )* (["A"-"Z", "a"-"z"] | "_") ) | (( ["0" - "9"] ) ( ["a"-"z", "A"-"Z"]  |"_"| ["0" - "9"] ( ["a"-"z", "A"-"Z"] | "_" ) )* (["a"-"z", "A"-"Z"] | "_")) ) >
       {
           error = ("Line " + input_stream.getBeginLine() + " Column " + input_stream.getBeginColumn() + " - Invalid Identifier: " + image + " Code: ");;
           countLexError++;
       }
}


JAVACODE void program(CompiladorGui gui)
{
Token t;
    do
    {
    t = getNextToken();
    Token st = t;
        while ( st.specialToken != null)
            st = st.specialToken;
            do {
               if ( !Menosshort ) {
                   gui.jTextArea1.append(token_source.error + im(st.kind) + "\n");
                       token_source.error = "";
               }
               else {
                   System.out.println(token_source.error + im(st.kind) + "\n");
                   token_source.error = "";
               }
               st = st.next;
        } while (st != t.next);
    } while (t.kind != prataLangConstants.EOF);
    if(token_source.curLexState == 1){
          gui.jTextArea1.append(" Error to end Block Comment \n");
          token_source.countLexError++;
    }
}
