/* Generated By:JavaCC: Do not edit this line. prataLang.java */
package compilador.regras;
import java.io.*;
import java.util.Objects;

import compilador.telas.CompiladorGui;
public class prataLang implements prataLangConstants {

  final static String Version = "PrataLang Compiler - Version 1.0 - 2024";
  boolean Menosshort = false;
  int countParseError;

  public static void main(String[] args) throws ParseException {
    String filename = ""; // nome do arquivo a ser analizado
    prataLang parser;
    int i;
    boolean ms = false;

    System.out.println(Version);

    // le os parametros passados para o compilador
    for(i = 0; i < args.length - 1; i++) {
      if ( args[i].equalsIgnoreCase("-short") ) ms = true;
      else{
        System.out.println("Usage is: java PrataLang [-short] inputfile");
        System.exit(0);
      }
    }

    if (args[i].equals("-")){
      // le entrada padrão
       System.out.println(" Reading from standard input . . . ");
       parser = new prataLang(System.in);
    } else {
      // le do arquivo
      filename = args[args.length-1];
      System.out.println("Readig from file " + filename + " . . . ");
      try{
        parser = new prataLang(new java.io.FileInputStream(filename));
      } catch (java.io.FileNotFoundException e ) {
        System.out.println("File "+filename+ " NOT FOUND");
        return;
      }
    }
    parser.Menosshort = ms;
    //parser.program(); //chama o metodo que faz a analise

    // verifica se houver erro lexico
    if (parser.token_source.foundLexError() != 0)
      System.out.println(
        parser.token_source.foundLexError() + " Erro Lexico encontrado!! "
      );
    else System.out.println(" Program successfully analized ");



  } //main

    // Metodo que é chamado no CompiladorGui para compilar pelo botão e pelo menu
  public static void Compile(String file, prataLang parser, CompiladorGui gui) throws ParseException {
      boolean debug = false;
      String filename = file; // nome do arquivo a ser analizado
      boolean ms = false;

      gui.jTextArea1.append(Version + "\n");

      gui.jTextArea1.append("Readig from file " + filename + " . . .  \n");

      try{
            parser = new prataLang(new java.io.FileInputStream(filename));
      } catch (java.io.FileNotFoundException e ) {
            gui.jTextArea1.append("File "+filename+ " NOT FOUND \n");
            return;
      }

      if(!debug) parser.disable_tracing();


      parser.Menosshort = ms;

      try{
          parser.lex(gui);//chama o metodo que faz a analise
          parser.ReInit(new java.io.FileInputStream(filename));
          parser.program();
      }
      catch (ParseException e){
          gui.jTextArea1.append(e.getMessage());
          parser.countParseError = 1;
      } catch (FileNotFoundException e) {
          throw new RuntimeException(e);
      }
      finally{
          if (parser.token_source.foundLexError() != 0){
              gui.jTextArea1.append(
                  parser.token_source.foundLexError() + " Lexic Error Found \n"
              );
              if (parser.countParseError != 0){
                  gui.jTextArea1.append(
                          parser.countParseError + " Syntactic Errors found"
                  );
              }
          }
          else gui.jTextArea1.append(" Successfully Analized Program \n");
      }


  }

  //metodo auxiliar
  static public String im(int x) {
    int  k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try{
      s=s.substring(1,k);
    }
    catch (StringIndexOutOfBoundsException e ){ }
    return s;
  }

  void lex(CompiladorGui gui) throws ParseException {
    trace_call("lex");
    try {
      Token t;
      do
      {
          t = getNextToken();
          Token st = t;
          while ( st.specialToken != null)
          st = st.specialToken;
          do {
              if(token_source.error != ""){
                  if ( !Menosshort ) {
                      gui.jTextArea1.append(token_source.error + st.kind + " " + im(st.kind) + "\n");
                      token_source.error = "";
                  }
                  else {
                      System.out.println(token_source.error + st.kind + " " + im(st.kind) + "\n");
                      token_source.error = "";
                  }
              }
              st = st.next;
          } while (st != t.next);
      } while (t.kind != prataLangConstants.EOF);
      if(token_source.curLexState == 1){
          gui.jTextArea1.append(" Error to end Block Comment \n");
          token_source.countLexError++;
      }
    } finally {
      trace_return("lex");
    }
  }

  final public void program() throws ParseException {
    trace_call("program");
    try {
      jj_consume_token(MAKE);
      jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case VAR:
        declaracao();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GET:
      case PUT:
      case IF:
      case WHILE:
      case NOT:
      case int_constant:
      case char_constant:
      case float_constant:
      case string_constant:
      case TRUE:
      case FALSE:
      case IDENT:
      case LPAREN:
        listacomandos();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(END);
      jj_consume_token(DOT);
      jj_consume_token(0);
    } finally {
      trace_return("program");
    }
  }

  final public void declaracao() throws ParseException {
    trace_call("declaracao");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        declaracaoV();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
          declaracaoC();
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        break;
      case CONST:
        declaracaoC();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          declaracaoV();
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("declaracao");
    }
  }

  final public void declaracaoC() throws ParseException {
    trace_call("declaracaoC");
    try {
      jj_consume_token(CONST);
      listadeconstante();
      jj_consume_token(END);
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("declaracaoC");
    }
  }

  final public void listadeconstante() throws ParseException {
    trace_call("listadeconstante");
    try {
      tipoC();
      jj_consume_token(TWO_POINTS);
      listadeident();
      jj_consume_token(EQUAL);
      valor();
      jj_consume_token(DOT);
      _listadeconstante();
    } finally {
      trace_return("listadeconstante");
    }
  }

  final public void _listadeconstante() throws ParseException {
    trace_call("_listadeconstante");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case REAL:
      case CHAR:
      case STRING:
        listadeconstante();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } finally {
      trace_return("_listadeconstante");
    }
  }

  final public void tipoC() throws ParseException {
    trace_call("tipoC");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case REAL:
        jj_consume_token(REAL);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipoC");
    }
  }

  final public void listadeident() throws ParseException {
    trace_call("listadeident");
    try {
      jj_consume_token(IDENT);
      _listadeident();
    } finally {
      trace_return("listadeident");
    }
  }

  final public void _listadeident() throws ParseException {
    trace_call("_listadeident");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        listadeident();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } finally {
      trace_return("_listadeident");
    }
  }

  final public void valor() throws ParseException {
    trace_call("valor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_constant:
        jj_consume_token(int_constant);
        break;
      case float_constant:
        jj_consume_token(float_constant);
        break;
      case char_constant:
        jj_consume_token(char_constant);
        break;
      case string_constant:
        jj_consume_token(string_constant);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("valor");
    }
  }

  final public void declaracaoV() throws ParseException {
    trace_call("declaracaoV");
    try {
      jj_consume_token(VAR);
      listadevariavel();
      jj_consume_token(END);
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("declaracaoV");
    }
  }

  final public void listadevariavel() throws ParseException {
    trace_call("listadevariavel");
    try {
      tipoV();
      jj_consume_token(TWO_POINTS);
      listadeident();
      jj_consume_token(DOT);
      _listadevariavel();
    } finally {
      trace_return("listadevariavel");
    }
  }

  final public void _listadevariavel() throws ParseException {
    trace_call("_listadevariavel");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case REAL:
      case CHAR:
      case BOOL:
      case STRING:
        listadevariavel();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } finally {
      trace_return("_listadevariavel");
    }
  }

  final public void tipoV() throws ParseException {
    trace_call("tipoV");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case REAL:
        jj_consume_token(REAL);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case BOOL:
        jj_consume_token(BOOL);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipoV");
    }
  }

  final public void comandoatribuaicao() throws ParseException {
    trace_call("comandoatribuaicao");
    try {
      expressao();
      jj_consume_token(ASSIGN);
      jj_consume_token(IDENT);
      jj_consume_token(DOT);
    } finally {
      trace_return("comandoatribuaicao");
    }
  }

  final public void comandoentrada() throws ParseException {
    trace_call("comandoentrada");
    try {
      jj_consume_token(GET);
      jj_consume_token(LPAREN);
      listadeident();
      jj_consume_token(RPAREN);
      jj_consume_token(DOT);
    } finally {
      trace_return("comandoentrada");
    }
  }

  final public void comandosaida() throws ParseException {
    trace_call("comandosaida");
    try {
      jj_consume_token(PUT);
      jj_consume_token(LPAREN);
      listadeidenteconst();
      jj_consume_token(RPAREN);
      jj_consume_token(DOT);
    } finally {
      trace_return("comandosaida");
    }
  }

  final public void listadeidenteconst() throws ParseException {
    trace_call("listadeidenteconst");
    try {
      lic();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        lic();
      }
    } finally {
      trace_return("listadeidenteconst");
    }
  }

  final public void lic() throws ParseException {
    trace_call("lic");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        jj_consume_token(IDENT);
        break;
      case INT:
      case REAL:
      case CHAR:
      case STRING:
        tipoC();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("lic");
    }
  }

  final public void comandoselecao() throws ParseException {
    trace_call("comandoselecao");
    try {
      jj_consume_token(IF);
      elemento();
      jj_consume_token(THEN);
      listacomandos();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        listacomandos();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(END);
      jj_consume_token(DOT);
    } finally {
      trace_return("comandoselecao");
    }
  }

  final public void comandorepeticao() throws ParseException {
    trace_call("comandorepeticao");
    try {
      jj_consume_token(WHILE);
      elemento();
      jj_consume_token(DO);
      listacomandos();
      jj_consume_token(END);
      jj_consume_token(DOT);
    } finally {
      trace_return("comandorepeticao");
    }
  }

  final public void listacomandos() throws ParseException {
    trace_call("listacomandos");
    try {
      comandos();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GET:
      case PUT:
      case IF:
      case WHILE:
      case NOT:
      case int_constant:
      case char_constant:
      case float_constant:
      case string_constant:
      case TRUE:
      case FALSE:
      case IDENT:
      case LPAREN:
        listacomandos();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } finally {
      trace_return("listacomandos");
    }
  }

  final public void comandos() throws ParseException {
    trace_call("comandos");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case int_constant:
      case char_constant:
      case float_constant:
      case string_constant:
      case TRUE:
      case FALSE:
      case IDENT:
      case LPAREN:
        comandoatribuaicao();
        break;
      case GET:
        comandoentrada();
        break;
      case WHILE:
        comandorepeticao();
        break;
      case PUT:
        comandosaida();
        break;
      case IF:
        comandoselecao();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("comandos");
    }
  }

  final public void elemento() throws ParseException {
    trace_call("elemento");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        jj_consume_token(IDENT);
        break;
      case int_constant:
        jj_consume_token(int_constant);
        break;
      case float_constant:
        jj_consume_token(float_constant);
        break;
      case char_constant:
        jj_consume_token(char_constant);
        break;
      case string_constant:
        jj_consume_token(string_constant);
        break;
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      case NOT:
      case LPAREN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        jj_consume_token(LPAREN);
        expressao();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("elemento");
    }
  }

  final public void expressao() throws ParseException {
    trace_call("expressao");
    try {
      expressaoaroulo();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case DIFFERENT:
      case MINOR:
      case MINOR_EQUAL:
      case BIGGER:
      case BIGGER_EQUAL:
        _expressao();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } finally {
      trace_return("expressao");
    }
  }

  final public void _expressao() throws ParseException {
    trace_call("_expressao");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        expressaoaroulo();
        break;
      case DIFFERENT:
        jj_consume_token(DIFFERENT);
        expressaoaroulo();
        break;
      case BIGGER:
        jj_consume_token(BIGGER);
        expressaoaroulo();
        break;
      case MINOR:
        jj_consume_token(MINOR);
        expressaoaroulo();
        break;
      case BIGGER_EQUAL:
        jj_consume_token(BIGGER_EQUAL);
        expressaoaroulo();
        break;
      case MINOR_EQUAL:
        jj_consume_token(MINOR_EQUAL);
        expressaoaroulo();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("_expressao");
    }
  }

  final public void expressaoaroulo() throws ParseException {
    trace_call("expressaoaroulo");
    try {
      termo2();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case PLUS:
      case MINUS:
        menorP();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } finally {
      trace_return("expressaoaroulo");
    }
  }

  final public void menorP() throws ParseException {
    trace_call("menorP");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        expressaoaroulo();
        break;
      case MINUS:
        jj_consume_token(MINUS);
        expressaoaroulo();
        break;
      case OR:
        jj_consume_token(OR);
        expressaoaroulo();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("menorP");
    }
  }

  final public void termo2() throws ParseException {
    trace_call("termo2");
    try {
      termo1();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END_LOGIC:
      case MULTIPLICATION:
      case DIVISION:
      case ENTIRE_DIVISION:
      case DIVISION_REST:
        mediaP();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } finally {
      trace_return("termo2");
    }
  }

  final public void mediaP() throws ParseException {
    trace_call("mediaP");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICATION:
        jj_consume_token(MULTIPLICATION);
        termo2();
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
        termo2();
        break;
      case ENTIRE_DIVISION:
        jj_consume_token(ENTIRE_DIVISION);
        termo2();
        break;
      case DIVISION_REST:
        jj_consume_token(DIVISION_REST);
        termo2();
        break;
      case END_LOGIC:
        jj_consume_token(END_LOGIC);
        termo2();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("mediaP");
    }
  }

  final public void termo1() throws ParseException {
    trace_call("termo1");
    try {
      elemento();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POTENCY:
        maiorP();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } finally {
      trace_return("termo1");
    }
  }

  final public void maiorP() throws ParseException {
    trace_call("maiorP");
    try {
      jj_consume_token(POTENCY);
      termo1();
    } finally {
      trace_return("maiorP");
    }
  }

  /** Generated Token Manager. */
  public prataLangTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x104000,0x14e00000,0x4000,0x100000,0x104000,0xb8000,0xb8000,0x0,0x0,0xf8000,0xf8000,0x0,0xb8000,0x2000000,0x14e00000,0x14e00000,0x10000000,0x10000000,0x0,0x0,0x20000000,0x20000000,0x40000000,0x40000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x217e000,0x0,0x0,0x0,0x0,0x0,0x400000,0x1e000,0x0,0x0,0x400000,0x100000,0x0,0x217e000,0x217e000,0x0,0x217e000,0x3f,0x3f,0xc0,0xc0,0x1b00,0x1b00,0x400,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public prataLang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public prataLang(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new prataLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public prataLang(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new prataLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public prataLang(prataLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(prataLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[66];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 66; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
