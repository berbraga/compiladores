/* Generated By:JavaCC: Do not edit this line. prataLang.java */
package compilador.regras;
import java.io.*;
import compilador.telas.CompiladorGui;
public class prataLang implements prataLangConstants {

  final static String Version = "PrataLang Compiler - Version 1.0 - 2024";
  boolean Menosshort = false;

  public static void main(String[] args) throws ParseException {
    String filename = ""; // nome do arquivo a ser analizado
    prataLang parser;
    int i;
    boolean ms = false;

    System.out.println(Version);

    // le os parametros passados para o compilador
    for(i = 0; i < args.length - 1; i++) {
      if ( args[i].equalsIgnoreCase("-short") ) ms = true;
      else{
        System.out.println("Usage is: java PrataLang [-short] inputfile");
        System.exit(0);
      }
    }

    if (args[i].equals("-")){
      // le entrada padrão
       System.out.println(" Reading from standard input . . . ");
       parser = new prataLang(System.in);
    } else {
      // le do arquivo
      filename = args[args.length-1];
      System.out.println("Readig from file " + filename + " . . . ");
      try{
        parser = new prataLang(new java.io.FileInputStream(filename));
      } catch (java.io.FileNotFoundException e ) {
        System.out.println("File "+filename+ " NOT FOUND");
        return;
      }
    }
    parser.Menosshort = ms;
    //parser.program(); //chama o metodo que faz a analise

    // verifica se houver erro lexico
    if (parser.token_source.foundLexError() != 0)
      System.out.println(
        parser.token_source.foundLexError() + " Erro Lexico encontrado!! "
      );
    else System.out.println(" Program successfully analized ");



  } //main

    // Metodo que é chamado no CompiladorGui para compilar pelo botão e pelo menu
  public static void Compile(String file, prataLang parser, CompiladorGui gui) throws ParseException {
      String filename = file; // nome do arquivo a ser analizado
      boolean ms = false;

      gui.jTextArea1.append(Version + "\n");

      gui.jTextArea1.append("Readig from file " + filename + " . . .  \n");

      try{
            parser = new prataLang(new java.io.FileInputStream(filename));
      } catch (java.io.FileNotFoundException e ) {
            gui.jTextArea1.append("File "+filename+ " NOT FOUND \n");
            return;
      }

      parser.Menosshort = ms;
      parser.program(gui); //chama o metodo que faz a analise

      if (parser.token_source.foundLexError() != 0)
            gui.jTextArea1.append(
              parser.token_source.foundLexError() + " Lexic Error Found \n"
            );
      else gui.jTextArea1.append(" Successfully Analized Program \n");
  }

  //metodo auxiliar
  static public String im(int x) {
    int  k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try{
      s=s.substring(1,k);
    }
    catch (StringIndexOutOfBoundsException e ){ }
    return s;
  }

  void program(CompiladorGui gui) throws ParseException {
Token t;
    do
    {
    t = getNextToken();
    Token st = t;
        while ( st.specialToken != null)
            st = st.specialToken;
            do {
               if ( !Menosshort ) {
                   gui.jTextArea1.append(token_source.error + st.kind + " " + im(st.kind) + "\n");
                       token_source.error = "";
               }
               else {
                   System.out.println(token_source.error + st.kind + " " + im(st.kind) + "\n");
                   token_source.error = "";
               }
               st = st.next;
        } while (st != t.next);
    } while (t.kind != prataLangConstants.EOF);
    if(token_source.curLexState == 1){
          gui.jTextArea1.append(" Error to end Block Comment \n");
          token_source.countLexError++;
    }
  }

  /** Generated Token Manager. */
  public prataLangTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }

  /** Constructor with InputStream. */
  public prataLang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public prataLang(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new prataLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public prataLang(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new prataLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public prataLang(prataLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(prataLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[65];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 65; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
