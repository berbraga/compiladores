/* Generated By:JavaCC: Do not edit this line. prataLang.java */
package compilador.regras;
import java.io.*;
import java.util.Objects;

import compilador.telas.CompiladorGui;
import java.util.HashMap;
import java.util.Stack;
public class prataLang implements prataLangConstants {

  final static String Version = "PrataLang Compiler - Version 1.0 - 2024";
  boolean Menosshort = false;
  int countParseError = 0;
  String error_s = "";

  Integer pointer = 1;
  String context = "";

  int VT  = 0, VP = 0;
  int tipo = 0 ;

  Stack pilha = new Stack<Integer>();
  Stack instructionArea = new Stack<InstructionArea>();
  HashMap simbolsTable = new HashMap<String, Auxst>();

  public static void main(String[] args) throws ParseException {
    String filename = ""; // nome do arquivo a ser analizado
    prataLang parser;
    int i;
    boolean ms = false;

    System.out.println(Version);

    // le os parametros passados para o compilador
    for(i = 0; i < args.length - 1; i++) {
      if ( args[i].equalsIgnoreCase("-short") ) ms = true;
      else{
        System.out.println("Usage is: java PrataLang [-short] inputfile");
        System.exit(0);
      }
    }

    if (args[i].equals("-")){
      // le entrada padrão
       System.out.println(" Reading from standard input . . . ");
       parser = new prataLang(System.in);
    } else {
      // le do arquivo
      filename = args[args.length-1];
      System.out.println("Readig from file " + filename + " . . . ");
      try{
        parser = new prataLang(new java.io.FileInputStream(filename));
      } catch (java.io.FileNotFoundException e ) {
        System.out.println("File "+filename+ " NOT FOUND");
        return;
      }
    }
    parser.Menosshort = ms;
    //parser.program(); //chama o metodo que faz a analise

    // verifica se houver erro lexico
    if (parser.token_source.foundLexError() != 0)
      System.out.println(
        parser.token_source.foundLexError() + " Erro Lexico encontrado!! "
      );
    else System.out.println(" Program successfully analized ");



  } //main

    // Metodo que é chamado no CompiladorGui para compilar pelo botão e pelo menu
  public static void Compile(String file, prataLang parser, CompiladorGui gui) throws ParseException {
      boolean debug = false;
      String filename = file; // nome do arquivo a ser analizado
      boolean ms = false;

      gui.jTextArea1.append(Version + "\n");

      gui.jTextArea1.append("Readig from file " + filename + " . . .  \n");

      try{
            parser = new prataLang(new java.io.FileInputStream(filename));
      } catch (java.io.FileNotFoundException e ) {
            gui.jTextArea1.append("File "+filename+ " NOT FOUND \n");
            return;
      }

      if(!debug) parser.disable_tracing();


      parser.Menosshort = ms;

      try{
          parser.lex(gui);
          parser.ReInit(new java.io.FileInputStream(filename));
          if(parser.token_source.foundLexError() == 0){
            parser.program(gui);
          }
      }
      catch (ParseException e){
          parser.countParseError += 1;
      } catch (FileNotFoundException e) {
          throw new RuntimeException(e);
      }
      finally{
          if (parser.token_source.foundLexError() != 0){
              gui.jTextArea1.append(
                  parser.token_source.foundLexError() + " Lexic Error Found \n"
              );

          }
          else if (parser.countParseError != 0){
              gui.jTextArea1.append(parser.error_s + "\n");
              gui.jTextArea1.append(
                  parser.countParseError + " Syntactic Errors found"
              );
          }
          else gui.jTextArea1.append(" Successfully Analized Program \n");
      }


  }

  //metodo auxiliar
  static public String im(int x) {
    int  k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try{
      s=s.substring(1,k);
    }
    catch (StringIndexOutOfBoundsException e ){ }
    return s;
  }

  void lex(CompiladorGui gui) throws ParseException {
    trace_call("lex");
    try {
      Token t;
      do
      {
          t = getNextToken();
          Token st = t;
          while ( st.specialToken != null)
          st = st.specialToken;
          do {
              if(token_source.eherro != 0){
                  if ( !Menosshort ) {
                      gui.jTextArea1.append(token_source.error + st.kind + " " + im(st.kind) + "\n");
                      token_source.error = "";
                  }
                  else {
                      System.out.println(token_source.error + st.kind + " " + im(st.kind) + "\n");
                      token_source.error = "";
                  }
              }
              st = st.next;
          } while (st != t.next);
      } while (t.kind != prataLangConstants.EOF);
      if(token_source.curLexState == 1){
          gui.jTextArea1.append(" Error to end Block Comment \n");
          token_source.countLexError++;
      }
    } finally {
      trace_return("lex");
    }
  }

  final public void program(CompiladorGui gui) throws ParseException {
    trace_call("program");
    try {
      try {
        jj_consume_token(MAKE);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Make" + "\n");
        countParseError += 1;
      }
      try {
        jj_consume_token(IDENT);
        two();
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Identifier" + "\n");
        countParseError += 1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case VAR:
        declaracao(gui);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GET:
      case PUT:
      case IF:
      case WHILE:
      case NOT:
      case int_constant:
      case char_constant:
      case float_constant:
      case TRUE:
      case FALSE:
      case IDENT:
      case LPAREN:
        listacomandos(gui);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      try {
        jj_consume_token(END);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: End" + "\n");
        countParseError += 1;
      }
      try {
        jj_consume_token(DOT);
        one();
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Dot" + "\n");
        countParseError += 1;
      }
      jj_consume_token(0);
    } finally {
      trace_return("program");
    }
  }

  final public void declaracao(CompiladorGui gui) throws ParseException {
    trace_call("declaracao");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        declaracaoV(gui);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
          declaracaoC(gui);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        break;
      case CONST:
        declaracaoC(gui);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          declaracaoV(gui);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("declaracao");
    }
  }

  final public void declaracaoC(CompiladorGui gui) throws ParseException {
    trace_call("declaracaoC");
    try {
      try {
        jj_consume_token(CONST);
        three();
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Constant" + "\n");
        countParseError += 1;
      }
      listadeconstante(gui);
      try {
        jj_consume_token(END);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: End" + "\n");
        countParseError += 1;
      }
      try {
        jj_consume_token(SEMICOLON);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Semicolon" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("declaracaoC");
    }
  }

  final public void listadeconstante(CompiladorGui gui) throws ParseException {
    trace_call("listadeconstante");
    try {
      tipoC(gui);
      try {
        jj_consume_token(TWO_POINTS);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Two Points (:)" + "\n");
        countParseError += 1;
      }
      listadeident(gui);
      four();
      try {
        jj_consume_token(EQUAL);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Equals (=)" + "\n");
        countParseError += 1;
      }
      valor(gui);
      five();
      try {
        jj_consume_token(DOT);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Dot" + "\n");
        countParseError += 1;
      }
      _listadeconstante(gui);
    } finally {
      trace_return("listadeconstante");
    }
  }

  final public void _listadeconstante(CompiladorGui gui) throws ParseException {
    trace_call("_listadeconstante");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case REAL:
      case CHAR:
        listadeconstante(gui);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } finally {
      trace_return("_listadeconstante");
    }
  }

  final public void tipoC(CompiladorGui gui) throws ParseException {
    trace_call("tipoC");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          jj_consume_token(INT);
          seven();
          break;
        case REAL:
          jj_consume_token(REAL);
          eight();
          break;
        case CHAR:
          jj_consume_token(CHAR);
          nine();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Int, Real or Char" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("tipoC");
    }
  }

  final public void listadeident(CompiladorGui gui) throws ParseException {
    trace_call("listadeident");
    try {
      try {
        jj_consume_token(IDENT);
        eleven();
        _listadeident(gui);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Identifier" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("listadeident");
    }
  }

  final public void _listadeident(CompiladorGui gui) throws ParseException {
    trace_call("_listadeident");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        listadeident(gui);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } finally {
      trace_return("_listadeident");
    }
  }

  final public void valor(CompiladorGui gui) throws ParseException {
    trace_call("valor");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case int_constant:
          jj_consume_token(int_constant);
          break;
        case float_constant:
          jj_consume_token(float_constant);
          break;
        case char_constant:
          jj_consume_token(char_constant);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Values" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("valor");
    }
  }

  final public void declaracaoV(CompiladorGui gui) throws ParseException {
    trace_call("declaracaoV");
    try {
      try {
        jj_consume_token(VAR);
        six();
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Var" + "\n");
        countParseError += 1;
      }
      listadevariavel(gui);
      try {
        jj_consume_token(END);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: End" + "\n");
        countParseError += 1;
      }
      try {
        jj_consume_token(SEMICOLON);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Semicolon" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("declaracaoV");
    }
  }

  final public void listadevariavel(CompiladorGui gui) throws ParseException {
    trace_call("listadevariavel");
    try {
      tipoV(gui);
      try {
        jj_consume_token(TWO_POINTS);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Two Points (:)" + "\n");
        countParseError += 1;
      }
      listadeident(gui);
      four();
      try {
        jj_consume_token(DOT);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Dot" + "\n");
        countParseError += 1;
      }
      _listadevariavel(gui);
    } finally {
      trace_return("listadevariavel");
    }
  }

  final public void _listadevariavel(CompiladorGui gui) throws ParseException {
    trace_call("_listadevariavel");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case REAL:
      case CHAR:
      case BOOL:
        listadevariavel(gui);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } finally {
      trace_return("_listadevariavel");
    }
  }

  final public void tipoV(CompiladorGui gui) throws ParseException {
    trace_call("tipoV");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          jj_consume_token(INT);
          seven();
          break;
        case REAL:
          jj_consume_token(REAL);
          eight();
          break;
        case CHAR:
          jj_consume_token(CHAR);
          nine();
          break;
        case BOOL:
          jj_consume_token(BOOL);
          ten();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Int, Real, Char or Bool" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("tipoV");
    }
  }

  final public void comandoatribuaicao(CompiladorGui gui) throws ParseException {
    trace_call("comandoatribuaicao");
    try {
      expressao(gui);
      try {
        jj_consume_token(ASSIGN);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Assign (->)" + "\n");
        countParseError += 1;
      }
      try {
        jj_consume_token(IDENT);
        twelve();
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Identifier" + "\n");
        countParseError += 1;
      }
      try {
        jj_consume_token(DOT);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Dot" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("comandoatribuaicao");
    }
  }

  final public void comandoentrada(CompiladorGui gui) throws ParseException {
    trace_call("comandoentrada");
    try {
      try {
        jj_consume_token(GET);
        thirteen();
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Get" + "\n");
        countParseError += 1;
      }
      try {
        jj_consume_token(LPAREN);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Left Parenthesis" + "\n");
        countParseError += 1;
      }
      listadeident(gui);
      try {
        jj_consume_token(RPAREN);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Right Parenthesis" + "\n");
        countParseError += 1;
      }
      try {
        jj_consume_token(DOT);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Dot" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("comandoentrada");
    }
  }

  final public void comandosaida(CompiladorGui gui) throws ParseException {
    trace_call("comandosaida");
    try {
      try {
        jj_consume_token(PUT);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Put" + "\n");
        countParseError += 1;
      }
      try {
        jj_consume_token(LPAREN);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Left Parenthesis" + "\n");
        countParseError += 1;
      }
      listadeidenteconst(gui);
      try {
        jj_consume_token(RPAREN);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Right Parenthesis" + "\n");
        countParseError += 1;
      }
      try {
        jj_consume_token(DOT);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Dot" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("comandosaida");
    }
  }

  final public void listadeidenteconst(CompiladorGui gui) throws ParseException {
    trace_call("listadeidenteconst");
    try {
      try {
        lic(gui);
        fourteen();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_1;
          }
          jj_consume_token(COMMA);
          lic(gui);
        }
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Comma" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("listadeidenteconst");
    }
  }

  final public void lic(CompiladorGui gui) throws ParseException {
    trace_call("lic");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jj_consume_token(IDENT);
          fifteen();
          break;
        case INT:
          jj_consume_token(INT);
          sixteen();
          break;
        case REAL:
          jj_consume_token(REAL);
          seventeen();
          break;
        case CHAR:
          jj_consume_token(CHAR);
          eighteen();
          break;
        case TRUE:
          jj_consume_token(TRUE);
          nineteen();
          break;
        case FALSE:
          jj_consume_token(FALSE);
          twenty();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Identifier or Const Type" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("lic");
    }
  }

  final public void comandoselecao(CompiladorGui gui) throws ParseException {
    trace_call("comandoselecao");
    try {
      try {
        jj_consume_token(IF);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: If" + "\n");
        countParseError += 1;
      }
      expressao(gui);
      twentyone();
      try {
        jj_consume_token(THEN);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Then" + "\n");
        countParseError += 1;
      }
      listacomandos(gui);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        twentythree();
        listacomandos(gui);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      try {
        jj_consume_token(END);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: End" + "\n");
        countParseError += 1;
      }
      try {
        jj_consume_token(DOT);
        twentytwo();
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Dot" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("comandoselecao");
    }
  }

  final public void comandorepeticao(CompiladorGui gui) throws ParseException {
    trace_call("comandorepeticao");
    try {
      try {
        jj_consume_token(WHILE);
        twentyfour();
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: While" + "\n");
        countParseError += 1;
      }
      expressao(gui);
      twentyfive();
      try {
        jj_consume_token(DO);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Do" + "\n");
        countParseError += 1;
      }
      listacomandos(gui);
      try {
        jj_consume_token(END);
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: End" + "\n");
        countParseError += 1;
      }
      try {
        jj_consume_token(DOT);
        twentysix();
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Dot" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("comandorepeticao");
    }
  }

  final public void listacomandos(CompiladorGui gui) throws ParseException {
    trace_call("listacomandos");
    try {
      comandos(gui);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GET:
      case PUT:
      case IF:
      case WHILE:
      case NOT:
      case int_constant:
      case char_constant:
      case float_constant:
      case TRUE:
      case FALSE:
      case IDENT:
      case LPAREN:
        listacomandos(gui);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } finally {
      trace_return("listacomandos");
    }
  }

  final public void comandos(CompiladorGui gui) throws ParseException {
    trace_call("comandos");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case int_constant:
      case char_constant:
      case float_constant:
      case TRUE:
      case FALSE:
      case IDENT:
      case LPAREN:
        comandoatribuaicao(gui);
        break;
      case GET:
        comandoentrada(gui);
        break;
      case WHILE:
        comandorepeticao(gui);
        break;
      case PUT:
        comandosaida(gui);
        break;
      case IF:
        comandoselecao(gui);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("comandos");
    }
  }

  final public void elemento(CompiladorGui gui) throws ParseException {
    trace_call("elemento");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jj_consume_token(IDENT);
          fifteen();
          break;
        case int_constant:
          jj_consume_token(int_constant);
          sixteen();
          break;
        case float_constant:
          jj_consume_token(float_constant);
          seventeen();
          break;
        case char_constant:
          jj_consume_token(char_constant);
          eighteen();
          break;
        case TRUE:
          jj_consume_token(TRUE);
          nineteen();
          break;
        case FALSE:
          jj_consume_token(FALSE);
          twenty();
          break;
        case NOT:
        case LPAREN:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOT:
            jj_consume_token(NOT);
            break;
          default:
            jj_la1[16] = jj_gen;
            ;
          }
          jj_consume_token(LPAREN);
          expressao(gui);
          jj_consume_token(RPAREN);
          fourtytwo();
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Element" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("elemento");
    }
  }

  final public void expressao(CompiladorGui gui) throws ParseException {
    trace_call("expressao");
    try {
      expressaoaroulo(gui);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case DIFFERENT:
      case MINOR:
      case MINOR_EQUAL:
      case BIGGER:
      case BIGGER_EQUAL:
        _expressao(gui);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } finally {
      trace_return("expressao");
    }
  }

  final public void _expressao(CompiladorGui gui) throws ParseException {
    trace_call("_expressao");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          jj_consume_token(EQUAL);
          expressaoaroulo(gui);
          twentyseven();
          break;
        case DIFFERENT:
          jj_consume_token(DIFFERENT);
          expressaoaroulo(gui);
          twentyeight();
          break;
        case BIGGER:
          jj_consume_token(BIGGER);
          expressaoaroulo(gui);
          twentynine();
          break;
        case MINOR:
          jj_consume_token(MINOR);
          expressaoaroulo(gui);
          thirty();
          break;
        case BIGGER_EQUAL:
          jj_consume_token(BIGGER_EQUAL);
          expressaoaroulo(gui);
          thirtyone();
          break;
        case MINOR_EQUAL:
          jj_consume_token(MINOR_EQUAL);
          expressaoaroulo(gui);
          thirtytwo();
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Exception e) {
        gui.jTextArea1.append("Line: " + token_source.input_stream.getBeginLine() + " Column: " + (token_source.input_stream.getBeginColumn() - 1) + " Expected: Arithmetic or Logical operators" + "\n");
        countParseError += 1;
      }
    } finally {
      trace_return("_expressao");
    }
  }

  final public void expressaoaroulo(CompiladorGui gui) throws ParseException {
    trace_call("expressaoaroulo");
    try {
      termo2(gui);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case PLUS:
      case MINUS:
        menorP(gui);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } finally {
      trace_return("expressaoaroulo");
    }
  }

  final public void menorP(CompiladorGui gui) throws ParseException {
    trace_call("menorP");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        termo2(gui);
        thirtythree();
        menorP(gui);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        termo2(gui);
        thirtyfour();
        menorP(gui);
        break;
      case OR:
        jj_consume_token(OR);
        termo2(gui);
        thirtyfive();
        menorP(gui);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("menorP");
    }
  }

  final public void termo2(CompiladorGui gui) throws ParseException {
    trace_call("termo2");
    try {
      termo1(gui);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END_LOGIC:
      case MULTIPLICATION:
      case DIVISION:
      case ENTIRE_DIVISION:
      case DIVISION_REST:
        mediaP(gui);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } finally {
      trace_return("termo2");
    }
  }

  final public void mediaP(CompiladorGui gui) throws ParseException {
    trace_call("mediaP");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICATION:
        jj_consume_token(MULTIPLICATION);
        termo1(gui);
        thirtysix();
        mediaP(gui);
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
        termo1(gui);
        thirtyseven();
        mediaP(gui);
        break;
      case ENTIRE_DIVISION:
        jj_consume_token(ENTIRE_DIVISION);
        termo1(gui);
        thirtyeight();
        mediaP(gui);
        break;
      case DIVISION_REST:
        jj_consume_token(DIVISION_REST);
        termo1(gui);
        thirtynine();
        mediaP(gui);
        break;
      case END_LOGIC:
        jj_consume_token(END_LOGIC);
        termo1(gui);
        fourty();
        mediaP(gui);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("mediaP");
    }
  }

  final public void termo1(CompiladorGui gui) throws ParseException {
    trace_call("termo1");
    try {
      elemento(gui);
      fourtyone();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POTENCY:
        maiorP(gui);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } finally {
      trace_return("termo1");
    }
  }

  final public void maiorP(CompiladorGui gui) throws ParseException {
    trace_call("maiorP");
    try {
      jj_consume_token(POTENCY);
      termo1(gui);
    } finally {
      trace_return("maiorP");
    }
  }

  /** Generated Token Manager. */
  public prataLangTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x84000,0xa700000,0x4000,0x80000,0x84000,0x38000,0x38000,0x0,0x0,0x78000,0x78000,0x0,0x38000,0x1000000,0xa700000,0xa700000,0x8000000,0x8000000,0x80000000,0x80000000,0x10000000,0x10000000,0x20000000,0x20000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x85f000,0x0,0x0,0x0,0x0,0x0,0x100000,0x7000,0x0,0x0,0x100000,0x58000,0x0,0x85f000,0x85f000,0x0,0x85f000,0x1f,0x1f,0x60,0x60,0xd80,0xd80,0x200,};
   }

  /** Constructor with InputStream. */
  public prataLang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public prataLang(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new prataLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public prataLang(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new prataLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public prataLang(prataLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(prataLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void one ()  {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"STP", 0);
    instructionArea.add(instruction);
  }
  private void two () {
    Auxst auxst = new Auxst(0); //category e atributo
    simbolsTable.put(token, auxst);
  }
  private void three () {
    context = "const";
  }
  private void four () {
    if( tipo == 1 || tipo == 5 ) {
      InstructionArea instruction = new InstructionArea<Integer>(pointer, "ALI", VP);
      instructionArea.add(instruction);
      pointer++;
    }else if( tipo == 2 || tipo == 6 ) {
      InstructionArea instruction = new InstructionArea<Integer>(pointer, "ALR", VP);
      instructionArea.add(instruction);
      pointer++;
    }else if( tipo == 3 || tipo == 7 ) {
      InstructionArea instruction = new InstructionArea<Integer>(pointer, "ALS", VP);
      instructionArea.add(instruction);
      pointer++;
    }else if( tipo == 4 ) {
      InstructionArea instruction = new InstructionArea<Integer>(pointer, "ALB", VP);
      instructionArea.add(instruction);
      pointer++;
    }if (tipo == 1 ||tipo == 2 ||tipo == 3 ||tipo == 4 ){
      VP = 0;
    }


  }

  private void five () {
    switch (tipo){
      case 5:
        InstructionArea instruction = new InstructionArea<Integer>(pointer, "LDI", Integer.valueOf(token.image));
        instructionArea.add(instruction);
        pointer++;
        break;
      case 6:
        InstructionArea instruction1 = new InstructionArea<Float>(pointer, "LDR", Float.valueOf(token.image));
        instructionArea.add(instruction1);
        pointer++;
        break;
      case 7:
        InstructionArea instruction2 = new InstructionArea<String>(pointer, "LDS", token.image);
        instructionArea.add(instruction2);
        pointer++;
        break;
    }
    InstructionArea instruction3 = new InstructionArea<Integer>(pointer, "STC", VP);
    instructionArea.add(instruction3);
    pointer++;
    VP = 0;

  }
  private void six () {
    context = "var";
  }
  private void seven () {
    if (context == "var"){
      tipo = 1;
    }else {
      tipo = 5;
    }
  }
  private void eight () {
    if (context == "var"){
      tipo = 2;
    }else {
      tipo = 6;
    }
  }

  private void nine () {
    if (context == "var"){
      tipo = 3;
    }else {
      tipo = 7;
    }
  }
  private void ten (){
      tipo = 4;
  }
  private void eleven () {
    if ( context == "const" || context == "var" ) {
      if ( simbolsTable.containsKey(token.image)){
        System.out.println("deu erro 1 ");
      }else {
        VT++;
        VP++;
        simbolsTable.put(token.image,  new Auxst(tipo,VT) );

      }
    } else if ( context == "data entry") {
      if ( simbolsTable.containsKey(token.image)){
        Auxst aux = (Auxst) simbolsTable.get(token.image);
        if ( aux.getCategory() == 1  || aux.getCategory() == 2  || aux.getCategory() == 3  || aux.getCategory() == 4 ) {
          InstructionArea instruction = new InstructionArea<Integer>(pointer , "REA" , aux.getCategory());
          instructionArea.add(instruction);
          pointer++;
          InstructionArea instruction2 = new InstructionArea<Integer>(pointer , "STR" , aux.getAttribute());
          instructionArea.add(instruction2);
          pointer++;
        } else{
          System.out.println("deu erro 2");
        }
      }else {
        System.out.println("deu erro 3");
      }
    }

  }
  private void twelve () {
    
  }
  private void thirteen () {
    context = "data entry";
  }
  private void fourteen () {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"WRT", 0);
    instructionArea.add(instruction);
    pointer++;
  }
  private void fifteen () {
    
  }
  private void sixteen () {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"LDI", Integer.valueOf(token.image));
    instructionArea.add(instruction);
    pointer++;
  }
  private void seventeen () {
    InstructionArea instruction = new InstructionArea<Float>(pointer,"LDR", Float.valueOf(token.image));
    instructionArea.add(instruction);
    pointer++;
  }
  private void eighteen () {
    InstructionArea instruction = new InstructionArea<String>(pointer,"LDS", token.image);
    instructionArea.add(instruction);
    pointer++;
  }
  private void nineteen () {
    InstructionArea instruction = new InstructionArea<Boolean>(pointer,"LDB", true);
    instructionArea.add(instruction);
    pointer++;
  }
  private void twenty () {
    InstructionArea instruction = new InstructionArea<Boolean>(pointer,"LDB", false);
    instructionArea.add(instruction);
    pointer++;
  }
  private void twentyone () {
    
  }
  private void twentytwo () {
    
  }
  private void twentythree () {
    
  }
  private void twentyfour () {
    
  }
  private void twentyfive () {
    
  }
  private void twentysix () {
    
  }
  private void twentyseven () {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"EQL", 0);
    instructionArea.add(instruction);
    pointer++;
  }
  private void twentyeight () {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"DIF", 0);
    instructionArea.add(instruction);
    pointer++;
  }
  private void twentynine () {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"SMR", 0);
    instructionArea.add(instruction);
    pointer++;
  }
  private void thirty () {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"BGR", 0);
    instructionArea.add(instruction);
    pointer++;
  }
  private void thirtyone () {
    
  }
  private void thirtytwo () {
    
  }
  private void thirtythree () {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"ADD", 0);
    instructionArea.add(instruction);
    pointer++;
  }
  private void thirtyfour () {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"SUB", 0);
    instructionArea.add(instruction);
    pointer++;
  }
  private void thirtyfive () {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"OR", 0);
    instructionArea.add(instruction);
    pointer++;
  }
  private void thirtysix () {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"MUL", 0);
    instructionArea.add(instruction);
    pointer++;
  }
  private void thirtyseven () {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"DIV", 0);
    instructionArea.add(instruction);
    pointer++;
  }
  private void thirtyeight () {
    
  }
  private void thirtynine () {
    
  }
  private void fourty () {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"AND", 0);
    instructionArea.add(instruction);
    pointer++;
  }
  private void fourtyone () {
    
  }
  private void fourtytwo () {
    InstructionArea instruction = new InstructionArea<Integer>(pointer,"NOT", 0);
    instructionArea.add(instruction);
    pointer++;
  }


}
