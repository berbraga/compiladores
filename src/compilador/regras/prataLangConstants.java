/* Generated By:JavaCC: Do not edit this line. prataLangConstants.java */
package compilador.regras;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface prataLangConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MAKE = 12;
  /** RegularExpression Id. */
  int END = 13;
  /** RegularExpression Id. */
  int CONST = 14;
  /** RegularExpression Id. */
  int INT = 15;
  /** RegularExpression Id. */
  int REAL = 16;
  /** RegularExpression Id. */
  int CHAR = 17;
  /** RegularExpression Id. */
  int BOOL = 18;
  /** RegularExpression Id. */
  int STRING = 19;
  /** RegularExpression Id. */
  int VAR = 20;
  /** RegularExpression Id. */
  int GET = 21;
  /** RegularExpression Id. */
  int PUT = 22;
  /** RegularExpression Id. */
  int IF = 23;
  /** RegularExpression Id. */
  int THEN = 24;
  /** RegularExpression Id. */
  int ELSE = 25;
  /** RegularExpression Id. */
  int WHILE = 26;
  /** RegularExpression Id. */
  int DO = 27;
  /** RegularExpression Id. */
  int NOT = 28;
  /** RegularExpression Id. */
  int OR = 29;
  /** RegularExpression Id. */
  int END_LOGIC = 30;
  /** RegularExpression Id. */
  int ASSIGN = 31;
  /** RegularExpression Id. */
  int EQUAL = 32;
  /** RegularExpression Id. */
  int DIFFERENT = 33;
  /** RegularExpression Id. */
  int MINOR = 34;
  /** RegularExpression Id. */
  int MINOR_EQUAL = 35;
  /** RegularExpression Id. */
  int BIGGER = 36;
  /** RegularExpression Id. */
  int BIGGER_EQUAL = 37;
  /** RegularExpression Id. */
  int PLUS = 38;
  /** RegularExpression Id. */
  int MINUS = 39;
  /** RegularExpression Id. */
  int MULTIPLICATION = 40;
  /** RegularExpression Id. */
  int DIVISION = 41;
  /** RegularExpression Id. */
  int POTENCY = 42;
  /** RegularExpression Id. */
  int ENTIRE_DIVISION = 43;
  /** RegularExpression Id. */
  int DIVISION_REST = 44;
  /** RegularExpression Id. */
  int int_constant = 45;
  /** RegularExpression Id. */
  int char_constant = 46;
  /** RegularExpression Id. */
  int float_constant = 47;
  /** RegularExpression Id. */
  int string_constant = 48;
  /** RegularExpression Id. */
  int TRUE = 49;
  /** RegularExpression Id. */
  int FALSE = 50;
  /** RegularExpression Id. */
  int null_constant = 51;
  /** RegularExpression Id. */
  int IDENT = 52;
  /** RegularExpression Id. */
  int DOT = 53;
  /** RegularExpression Id. */
  int COMMA = 54;
  /** RegularExpression Id. */
  int SEMICOLON = 55;
  /** RegularExpression Id. */
  int TWO_POINTS = 56;
  /** RegularExpression Id. */
  int LPAREN = 57;
  /** RegularExpression Id. */
  int RPAREN = 58;
  /** RegularExpression Id. */
  int INVALID_LEXICAL = 59;
  /** RegularExpression Id. */
  int INVALID_CONST_STRING_WITH_LINEBREAK = 60;
  /** RegularExpression Id. */
  int INVALID_CONST_STRING_END = 61;
  /** RegularExpression Id. */
  int INVALID_CONST_FLOAT_SIZE = 62;
  /** RegularExpression Id. */
  int INVALID_CONST_INT_SIZE = 63;
  /** RegularExpression Id. */
  int INVALID_COMMENT_CLOSE = 64;
  /** RegularExpression Id. */
  int INVALID_IDENTIFIER = 65;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int multilinecomment = 1;
  /** Lexical state. */
  int singlelinecomment = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"//\"",
    "<token of kind 10>",
    "<token of kind 11>",
    "<MAKE>",
    "<END>",
    "<CONST>",
    "<INT>",
    "<REAL>",
    "<CHAR>",
    "<BOOL>",
    "<STRING>",
    "<VAR>",
    "<GET>",
    "<PUT>",
    "<IF>",
    "<THEN>",
    "<ELSE>",
    "<WHILE>",
    "<DO>",
    "\"!\"",
    "\"|\"",
    "\"&\"",
    "\"->\"",
    "\"=\"",
    "\"<>\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"**\"",
    "\"%\"",
    "\"%%\"",
    "<int_constant>",
    "<char_constant>",
    "<float_constant>",
    "<string_constant>",
    "<TRUE>",
    "<FALSE>",
    "<null_constant>",
    "<IDENT>",
    "\".\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "<INVALID_LEXICAL>",
    "<INVALID_CONST_STRING_WITH_LINEBREAK>",
    "<INVALID_CONST_STRING_END>",
    "<INVALID_CONST_FLOAT_SIZE>",
    "<INVALID_CONST_INT_SIZE>",
    "\"*/\"",
    "<INVALID_IDENTIFIER>",
  };

}
