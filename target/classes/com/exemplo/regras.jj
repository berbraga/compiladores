options {
    STATIC = false;
}
PARSER_BEGIN()

public class  {
    public static void main(String[] args) {
        // Inicialização do Analisador Léxico
        AnalisadorLexico parser = new AnalisadorLexico(System.in);
        try {
            parser.Input();
            System.out.println("Análise concluída sem erros.");
        } catch (ParseException e) {
            System.err.println("Erro de análise: " + e.getMessage());
        }
    }
}

PARSER_END()

SKIP : {
    " " | "\t" | "\n" | "\r"  // Ignora espaços em branco e quebras de linha
}

// Definição de Comentários de Linha e Bloco
SKIP : {
    "//" ~[\r\n]* ("\r" | "\n" | "\r\n") |
    "/*" (~["*"])* "*"+ (~["/"] (~["*"])* "*"+)* "/"
}

// Definição de Tokens para a Linguagem
TOKEN : {
    < IDENTIFIER: (["a"-"z", "A"-"Z"])(["a"-"z", "A"-"Z", "0"-"9", "_"])* > |
    < INTEGER: (["0"-"9"])+ > |
    < FLOAT: (["0"-"9"])+ "." (["0"-"9"])+ > |
    < STRING_LITERAL: "\"" (~["\""])* "\"" > |
    < KEYWORD_MAKE: "make" > |
    < KEYWORD_END: "end" > |
    < KEYWORD_CONST: "const" > |
    < KEYWORD_VAR: "var" > |
    < OPERATOR_PLUS: "+" > |
    < OPERATOR_MINUS: "-" > |
    < OPERATOR_MULT: "*" > |
    < OPERATOR_DIV: "/" > |
    < OPERATOR_POW: "**" > |
    < OPERATOR_MOD: "%" > |
    < OPERATOR_MOD_INT: "%%" > |
    < OPERATOR_EQ: "=" > |
    < OPERATOR_NEQ: "<>" > |
    < OPERATOR_LT: "<" > |
    < OPERATOR_GT: ">" > |
    < OPERATOR_LE: "<=" > |
    < OPERATOR_GE: ">=" > |
    < LOGICAL_AND: "&" > |
    < LOGICAL_OR: "|" > |
    < LOGICAL_NOT: "!" >
}

// Produções de Entrada para Iniciar a Análise
void Input() : {} {
    (Token())*
}

void Token() : {} {
    < IDENTIFIER > | < INTEGER > | < FLOAT > | < STRING_LITERAL > | < KEYWORD_MAKE > |
    < KEYWORD_END > | < KEYWORD_CONST > | < KEYWORD_VAR > | < OPERATOR_PLUS > |
    < OPERATOR_MINUS > | < OPERATOR_MULT > | < OPERATOR_DIV > | < OPERATOR_POW > |
    < OPERATOR_MOD > | < OPERATOR_MOD_INT > | < OPERATOR_EQ > | < OPERATOR_NEQ > |
    < OPERATOR_LT > | < OPERATOR_GT > | < OPERATOR_LE > | < OPERATOR_GE > |
    < LOGICAL_AND > | < LOGICAL_OR > | < LOGICAL_NOT >
}
